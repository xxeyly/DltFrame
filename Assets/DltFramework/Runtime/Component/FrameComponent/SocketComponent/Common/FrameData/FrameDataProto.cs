// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: FrameDataProto.proto
#pragma warning disable 1591, 0612, 3021
#region Designer generated code

using pb = global::Google.Protobuf;
using pbc = global::Google.Protobuf.Collections;
using pbr = global::Google.Protobuf.Reflection;
using scg = global::System.Collections.Generic;
/// <summary>Holder for reflection information generated from FrameDataProto.proto</summary>
public static partial class FrameDataProtoReflection {

  #region Descriptor
  /// <summary>File descriptor for FrameDataProto.proto</summary>
  public static pbr::FileDescriptor Descriptor {
    get { return descriptor; }
  }
  private static pbr::FileDescriptor descriptor;

  static FrameDataProtoReflection() {
    byte[] descriptorData = global::System.Convert.FromBase64String(
        string.Concat(
          "ChRGcmFtZURhdGFQcm90by5wcm90byJUCglGcmFtZURhdGESEgoKZnJhbWVJ",
          "bmRleBgBIAEoBRITCgtjbGllbnRUb2tlbhgCIAEoBRIQCghkYXRhVHlwZRgD",
          "IAEoCRIMCgRkYXRhGAQgASgMIkMKDkZyYW1lRGF0YUdyb3VwEhIKCmZyYW1l",
          "SW5kZXgYASABKAUSHQoJZnJhbWVEYXRhGAIgAygLMgouRnJhbWVEYXRhIj0K",
          "EkZyYW1lRGF0YUdyb3VwTGlzdBInCg5mcmFtZURhdGFHcm91cBgBIAMoCzIP",
          "LkZyYW1lRGF0YUdyb3VwIoIBCg1GcmFtZUluaXREYXRhEg8KB21hcE5hbWUY",
          "ASABKAkSEgoKZnJhbWVJbmRleBgCIAEoBRIRCglzdGFydFRpbWUYAyABKAMS",
          "EwoLY3VycmVudFRpbWUYBCABKAMSJAoLZnJhbWVSZWNvcmQYBSADKAsyDy5G",
          "cmFtZURhdGFHcm91cGIGcHJvdG8z"));
    descriptor = pbr::FileDescriptor.FromGeneratedCode(descriptorData,
        new pbr::FileDescriptor[] { },
        new pbr::GeneratedClrTypeInfo(null, new pbr::GeneratedClrTypeInfo[] {
          new pbr::GeneratedClrTypeInfo(typeof(global::FrameData), global::FrameData.Parser, new[]{ "FrameIndex", "ClientToken", "DataType", "Data" }, null, null, null),
          new pbr::GeneratedClrTypeInfo(typeof(global::FrameDataGroup), global::FrameDataGroup.Parser, new[]{ "FrameIndex", "FrameData" }, null, null, null),
          new pbr::GeneratedClrTypeInfo(typeof(global::FrameDataGroupList), global::FrameDataGroupList.Parser, new[]{ "FrameDataGroup" }, null, null, null),
          new pbr::GeneratedClrTypeInfo(typeof(global::FrameInitData), global::FrameInitData.Parser, new[]{ "MapName", "FrameIndex", "StartTime", "CurrentTime", "FrameRecord" }, null, null, null)
        }));
  }
  #endregion

}
#region Messages
/// <summary>
///帧数据
/// </summary>
public sealed partial class FrameData : pb::IMessage<FrameData> {
  private static readonly pb::MessageParser<FrameData> _parser = new pb::MessageParser<FrameData>(() => new FrameData());
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pb::MessageParser<FrameData> Parser { get { return _parser; } }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pbr::MessageDescriptor Descriptor {
    get { return global::FrameDataProtoReflection.Descriptor.MessageTypes[0]; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  pbr::MessageDescriptor pb::IMessage.Descriptor {
    get { return Descriptor; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public FrameData() {
    OnConstruction();
  }

  partial void OnConstruction();

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public FrameData(FrameData other) : this() {
    frameIndex_ = other.frameIndex_;
    clientToken_ = other.clientToken_;
    dataType_ = other.dataType_;
    data_ = other.data_;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public FrameData Clone() {
    return new FrameData(this);
  }

  /// <summary>Field number for the "frameIndex" field.</summary>
  public const int FrameIndexFieldNumber = 1;
  private int frameIndex_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public int FrameIndex {
    get { return frameIndex_; }
    set {
      frameIndex_ = value;
    }
  }

  /// <summary>Field number for the "clientToken" field.</summary>
  public const int ClientTokenFieldNumber = 2;
  private int clientToken_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public int ClientToken {
    get { return clientToken_; }
    set {
      clientToken_ = value;
    }
  }

  /// <summary>Field number for the "dataType" field.</summary>
  public const int DataTypeFieldNumber = 3;
  private string dataType_ = "";
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public string DataType {
    get { return dataType_; }
    set {
      dataType_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
    }
  }

  /// <summary>Field number for the "data" field.</summary>
  public const int DataFieldNumber = 4;
  private pb::ByteString data_ = pb::ByteString.Empty;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public pb::ByteString Data {
    get { return data_; }
    set {
      data_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
    }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override bool Equals(object other) {
    return Equals(other as FrameData);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public bool Equals(FrameData other) {
    if (ReferenceEquals(other, null)) {
      return false;
    }
    if (ReferenceEquals(other, this)) {
      return true;
    }
    if (FrameIndex != other.FrameIndex) return false;
    if (ClientToken != other.ClientToken) return false;
    if (DataType != other.DataType) return false;
    if (Data != other.Data) return false;
    return true;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override int GetHashCode() {
    int hash = 1;
    if (FrameIndex != 0) hash ^= FrameIndex.GetHashCode();
    if (ClientToken != 0) hash ^= ClientToken.GetHashCode();
    if (DataType.Length != 0) hash ^= DataType.GetHashCode();
    if (Data.Length != 0) hash ^= Data.GetHashCode();
    return hash;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override string ToString() {
    return pb::JsonFormatter.ToDiagnosticString(this);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void WriteTo(pb::CodedOutputStream output) {
    if (FrameIndex != 0) {
      output.WriteRawTag(8);
      output.WriteInt32(FrameIndex);
    }
    if (ClientToken != 0) {
      output.WriteRawTag(16);
      output.WriteInt32(ClientToken);
    }
    if (DataType.Length != 0) {
      output.WriteRawTag(26);
      output.WriteString(DataType);
    }
    if (Data.Length != 0) {
      output.WriteRawTag(34);
      output.WriteBytes(Data);
    }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public int CalculateSize() {
    int size = 0;
    if (FrameIndex != 0) {
      size += 1 + pb::CodedOutputStream.ComputeInt32Size(FrameIndex);
    }
    if (ClientToken != 0) {
      size += 1 + pb::CodedOutputStream.ComputeInt32Size(ClientToken);
    }
    if (DataType.Length != 0) {
      size += 1 + pb::CodedOutputStream.ComputeStringSize(DataType);
    }
    if (Data.Length != 0) {
      size += 1 + pb::CodedOutputStream.ComputeBytesSize(Data);
    }
    return size;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(FrameData other) {
    if (other == null) {
      return;
    }
    if (other.FrameIndex != 0) {
      FrameIndex = other.FrameIndex;
    }
    if (other.ClientToken != 0) {
      ClientToken = other.ClientToken;
    }
    if (other.DataType.Length != 0) {
      DataType = other.DataType;
    }
    if (other.Data.Length != 0) {
      Data = other.Data;
    }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(pb::CodedInputStream input) {
    uint tag;
    while ((tag = input.ReadTag()) != 0) {
      switch(tag) {
        default:
          input.SkipLastField();
          break;
        case 8: {
          FrameIndex = input.ReadInt32();
          break;
        }
        case 16: {
          ClientToken = input.ReadInt32();
          break;
        }
        case 26: {
          DataType = input.ReadString();
          break;
        }
        case 34: {
          Data = input.ReadBytes();
          break;
        }
      }
    }
  }

}

/// <summary>
///帧数据组
/// </summary>
public sealed partial class FrameDataGroup : pb::IMessage<FrameDataGroup> {
  private static readonly pb::MessageParser<FrameDataGroup> _parser = new pb::MessageParser<FrameDataGroup>(() => new FrameDataGroup());
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pb::MessageParser<FrameDataGroup> Parser { get { return _parser; } }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pbr::MessageDescriptor Descriptor {
    get { return global::FrameDataProtoReflection.Descriptor.MessageTypes[1]; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  pbr::MessageDescriptor pb::IMessage.Descriptor {
    get { return Descriptor; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public FrameDataGroup() {
    OnConstruction();
  }

  partial void OnConstruction();

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public FrameDataGroup(FrameDataGroup other) : this() {
    frameIndex_ = other.frameIndex_;
    frameData_ = other.frameData_.Clone();
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public FrameDataGroup Clone() {
    return new FrameDataGroup(this);
  }

  /// <summary>Field number for the "frameIndex" field.</summary>
  public const int FrameIndexFieldNumber = 1;
  private int frameIndex_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public int FrameIndex {
    get { return frameIndex_; }
    set {
      frameIndex_ = value;
    }
  }

  /// <summary>Field number for the "frameData" field.</summary>
  public const int FrameDataFieldNumber = 2;
  private static readonly pb::FieldCodec<global::FrameData> _repeated_frameData_codec
      = pb::FieldCodec.ForMessage(18, global::FrameData.Parser);
  private readonly pbc::RepeatedField<global::FrameData> frameData_ = new pbc::RepeatedField<global::FrameData>();
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public pbc::RepeatedField<global::FrameData> FrameData {
    get { return frameData_; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override bool Equals(object other) {
    return Equals(other as FrameDataGroup);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public bool Equals(FrameDataGroup other) {
    if (ReferenceEquals(other, null)) {
      return false;
    }
    if (ReferenceEquals(other, this)) {
      return true;
    }
    if (FrameIndex != other.FrameIndex) return false;
    if(!frameData_.Equals(other.frameData_)) return false;
    return true;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override int GetHashCode() {
    int hash = 1;
    if (FrameIndex != 0) hash ^= FrameIndex.GetHashCode();
    hash ^= frameData_.GetHashCode();
    return hash;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override string ToString() {
    return pb::JsonFormatter.ToDiagnosticString(this);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void WriteTo(pb::CodedOutputStream output) {
    if (FrameIndex != 0) {
      output.WriteRawTag(8);
      output.WriteInt32(FrameIndex);
    }
    frameData_.WriteTo(output, _repeated_frameData_codec);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public int CalculateSize() {
    int size = 0;
    if (FrameIndex != 0) {
      size += 1 + pb::CodedOutputStream.ComputeInt32Size(FrameIndex);
    }
    size += frameData_.CalculateSize(_repeated_frameData_codec);
    return size;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(FrameDataGroup other) {
    if (other == null) {
      return;
    }
    if (other.FrameIndex != 0) {
      FrameIndex = other.FrameIndex;
    }
    frameData_.Add(other.frameData_);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(pb::CodedInputStream input) {
    uint tag;
    while ((tag = input.ReadTag()) != 0) {
      switch(tag) {
        default:
          input.SkipLastField();
          break;
        case 8: {
          FrameIndex = input.ReadInt32();
          break;
        }
        case 18: {
          frameData_.AddEntriesFrom(input, _repeated_frameData_codec);
          break;
        }
      }
    }
  }

}

/// <summary>
///帧数据组列表
/// </summary>
public sealed partial class FrameDataGroupList : pb::IMessage<FrameDataGroupList> {
  private static readonly pb::MessageParser<FrameDataGroupList> _parser = new pb::MessageParser<FrameDataGroupList>(() => new FrameDataGroupList());
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pb::MessageParser<FrameDataGroupList> Parser { get { return _parser; } }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pbr::MessageDescriptor Descriptor {
    get { return global::FrameDataProtoReflection.Descriptor.MessageTypes[2]; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  pbr::MessageDescriptor pb::IMessage.Descriptor {
    get { return Descriptor; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public FrameDataGroupList() {
    OnConstruction();
  }

  partial void OnConstruction();

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public FrameDataGroupList(FrameDataGroupList other) : this() {
    frameDataGroup_ = other.frameDataGroup_.Clone();
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public FrameDataGroupList Clone() {
    return new FrameDataGroupList(this);
  }

  /// <summary>Field number for the "frameDataGroup" field.</summary>
  public const int FrameDataGroupFieldNumber = 1;
  private static readonly pb::FieldCodec<global::FrameDataGroup> _repeated_frameDataGroup_codec
      = pb::FieldCodec.ForMessage(10, global::FrameDataGroup.Parser);
  private readonly pbc::RepeatedField<global::FrameDataGroup> frameDataGroup_ = new pbc::RepeatedField<global::FrameDataGroup>();
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public pbc::RepeatedField<global::FrameDataGroup> FrameDataGroup {
    get { return frameDataGroup_; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override bool Equals(object other) {
    return Equals(other as FrameDataGroupList);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public bool Equals(FrameDataGroupList other) {
    if (ReferenceEquals(other, null)) {
      return false;
    }
    if (ReferenceEquals(other, this)) {
      return true;
    }
    if(!frameDataGroup_.Equals(other.frameDataGroup_)) return false;
    return true;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override int GetHashCode() {
    int hash = 1;
    hash ^= frameDataGroup_.GetHashCode();
    return hash;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override string ToString() {
    return pb::JsonFormatter.ToDiagnosticString(this);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void WriteTo(pb::CodedOutputStream output) {
    frameDataGroup_.WriteTo(output, _repeated_frameDataGroup_codec);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public int CalculateSize() {
    int size = 0;
    size += frameDataGroup_.CalculateSize(_repeated_frameDataGroup_codec);
    return size;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(FrameDataGroupList other) {
    if (other == null) {
      return;
    }
    frameDataGroup_.Add(other.frameDataGroup_);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(pb::CodedInputStream input) {
    uint tag;
    while ((tag = input.ReadTag()) != 0) {
      switch(tag) {
        default:
          input.SkipLastField();
          break;
        case 10: {
          frameDataGroup_.AddEntriesFrom(input, _repeated_frameDataGroup_codec);
          break;
        }
      }
    }
  }

}

/// <summary>
///帧初始化数据
/// </summary>
public sealed partial class FrameInitData : pb::IMessage<FrameInitData> {
  private static readonly pb::MessageParser<FrameInitData> _parser = new pb::MessageParser<FrameInitData>(() => new FrameInitData());
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pb::MessageParser<FrameInitData> Parser { get { return _parser; } }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pbr::MessageDescriptor Descriptor {
    get { return global::FrameDataProtoReflection.Descriptor.MessageTypes[3]; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  pbr::MessageDescriptor pb::IMessage.Descriptor {
    get { return Descriptor; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public FrameInitData() {
    OnConstruction();
  }

  partial void OnConstruction();

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public FrameInitData(FrameInitData other) : this() {
    mapName_ = other.mapName_;
    frameIndex_ = other.frameIndex_;
    startTime_ = other.startTime_;
    currentTime_ = other.currentTime_;
    frameRecord_ = other.frameRecord_.Clone();
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public FrameInitData Clone() {
    return new FrameInitData(this);
  }

  /// <summary>Field number for the "mapName" field.</summary>
  public const int MapNameFieldNumber = 1;
  private string mapName_ = "";
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public string MapName {
    get { return mapName_; }
    set {
      mapName_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
    }
  }

  /// <summary>Field number for the "frameIndex" field.</summary>
  public const int FrameIndexFieldNumber = 2;
  private int frameIndex_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public int FrameIndex {
    get { return frameIndex_; }
    set {
      frameIndex_ = value;
    }
  }

  /// <summary>Field number for the "startTime" field.</summary>
  public const int StartTimeFieldNumber = 3;
  private long startTime_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public long StartTime {
    get { return startTime_; }
    set {
      startTime_ = value;
    }
  }

  /// <summary>Field number for the "currentTime" field.</summary>
  public const int CurrentTimeFieldNumber = 4;
  private long currentTime_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public long CurrentTime {
    get { return currentTime_; }
    set {
      currentTime_ = value;
    }
  }

  /// <summary>Field number for the "frameRecord" field.</summary>
  public const int FrameRecordFieldNumber = 5;
  private static readonly pb::FieldCodec<global::FrameDataGroup> _repeated_frameRecord_codec
      = pb::FieldCodec.ForMessage(42, global::FrameDataGroup.Parser);
  private readonly pbc::RepeatedField<global::FrameDataGroup> frameRecord_ = new pbc::RepeatedField<global::FrameDataGroup>();
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public pbc::RepeatedField<global::FrameDataGroup> FrameRecord {
    get { return frameRecord_; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override bool Equals(object other) {
    return Equals(other as FrameInitData);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public bool Equals(FrameInitData other) {
    if (ReferenceEquals(other, null)) {
      return false;
    }
    if (ReferenceEquals(other, this)) {
      return true;
    }
    if (MapName != other.MapName) return false;
    if (FrameIndex != other.FrameIndex) return false;
    if (StartTime != other.StartTime) return false;
    if (CurrentTime != other.CurrentTime) return false;
    if(!frameRecord_.Equals(other.frameRecord_)) return false;
    return true;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override int GetHashCode() {
    int hash = 1;
    if (MapName.Length != 0) hash ^= MapName.GetHashCode();
    if (FrameIndex != 0) hash ^= FrameIndex.GetHashCode();
    if (StartTime != 0L) hash ^= StartTime.GetHashCode();
    if (CurrentTime != 0L) hash ^= CurrentTime.GetHashCode();
    hash ^= frameRecord_.GetHashCode();
    return hash;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override string ToString() {
    return pb::JsonFormatter.ToDiagnosticString(this);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void WriteTo(pb::CodedOutputStream output) {
    if (MapName.Length != 0) {
      output.WriteRawTag(10);
      output.WriteString(MapName);
    }
    if (FrameIndex != 0) {
      output.WriteRawTag(16);
      output.WriteInt32(FrameIndex);
    }
    if (StartTime != 0L) {
      output.WriteRawTag(24);
      output.WriteInt64(StartTime);
    }
    if (CurrentTime != 0L) {
      output.WriteRawTag(32);
      output.WriteInt64(CurrentTime);
    }
    frameRecord_.WriteTo(output, _repeated_frameRecord_codec);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public int CalculateSize() {
    int size = 0;
    if (MapName.Length != 0) {
      size += 1 + pb::CodedOutputStream.ComputeStringSize(MapName);
    }
    if (FrameIndex != 0) {
      size += 1 + pb::CodedOutputStream.ComputeInt32Size(FrameIndex);
    }
    if (StartTime != 0L) {
      size += 1 + pb::CodedOutputStream.ComputeInt64Size(StartTime);
    }
    if (CurrentTime != 0L) {
      size += 1 + pb::CodedOutputStream.ComputeInt64Size(CurrentTime);
    }
    size += frameRecord_.CalculateSize(_repeated_frameRecord_codec);
    return size;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(FrameInitData other) {
    if (other == null) {
      return;
    }
    if (other.MapName.Length != 0) {
      MapName = other.MapName;
    }
    if (other.FrameIndex != 0) {
      FrameIndex = other.FrameIndex;
    }
    if (other.StartTime != 0L) {
      StartTime = other.StartTime;
    }
    if (other.CurrentTime != 0L) {
      CurrentTime = other.CurrentTime;
    }
    frameRecord_.Add(other.frameRecord_);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(pb::CodedInputStream input) {
    uint tag;
    while ((tag = input.ReadTag()) != 0) {
      switch(tag) {
        default:
          input.SkipLastField();
          break;
        case 10: {
          MapName = input.ReadString();
          break;
        }
        case 16: {
          FrameIndex = input.ReadInt32();
          break;
        }
        case 24: {
          StartTime = input.ReadInt64();
          break;
        }
        case 32: {
          CurrentTime = input.ReadInt64();
          break;
        }
        case 42: {
          frameRecord_.AddEntriesFrom(input, _repeated_frameRecord_codec);
          break;
        }
      }
    }
  }

}

#endregion


#endregion Designer generated code
