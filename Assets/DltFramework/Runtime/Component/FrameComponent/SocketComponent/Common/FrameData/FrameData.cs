// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: FrameData.proto
#pragma warning disable 1591, 0612, 3021
#region Designer generated code

using pb = global::Google.Protobuf;
using pbc = global::Google.Protobuf.Collections;
using pbr = global::Google.Protobuf.Reflection;
using scg = global::System.Collections.Generic;
/// <summary>Holder for reflection information generated from FrameData.proto</summary>
public static partial class FrameDataReflection {

  #region Descriptor
  /// <summary>File descriptor for FrameData.proto</summary>
  public static pbr::FileDescriptor Descriptor {
    get { return descriptor; }
  }
  private static pbr::FileDescriptor descriptor;

  static FrameDataReflection() {
    byte[] descriptorData = global::System.Convert.FromBase64String(
        string.Concat(
          "Cg9GcmFtZURhdGEucHJvdG8iTwoJRnJhbWVEYXRhEg4KBnJvb21JZBgBIAEo",
          "BRISCgpmcmFtZUluZGV4GAIgASgFEhAKCGRhdGFUeXBlGAMgASgJEgwKBGRh",
          "dGEYBCABKAxiBnByb3RvMw=="));
    descriptor = pbr::FileDescriptor.FromGeneratedCode(descriptorData,
        new pbr::FileDescriptor[] { },
        new pbr::GeneratedClrTypeInfo(null, new pbr::GeneratedClrTypeInfo[] {
          new pbr::GeneratedClrTypeInfo(typeof(global::FrameData), global::FrameData.Parser, new[]{ "RoomId", "FrameIndex", "DataType", "Data" }, null, null, null)
        }));
  }
  #endregion

}
#region Messages
public sealed partial class FrameData : pb::IMessage<FrameData> {
  private static readonly pb::MessageParser<FrameData> _parser = new pb::MessageParser<FrameData>(() => new FrameData());
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pb::MessageParser<FrameData> Parser { get { return _parser; } }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pbr::MessageDescriptor Descriptor {
    get { return global::FrameDataReflection.Descriptor.MessageTypes[0]; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  pbr::MessageDescriptor pb::IMessage.Descriptor {
    get { return Descriptor; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public FrameData() {
    OnConstruction();
  }

  partial void OnConstruction();

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public FrameData(FrameData other) : this() {
    roomId_ = other.roomId_;
    frameIndex_ = other.frameIndex_;
    dataType_ = other.dataType_;
    data_ = other.data_;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public FrameData Clone() {
    return new FrameData(this);
  }

  /// <summary>Field number for the "roomId" field.</summary>
  public const int RoomIdFieldNumber = 1;
  private int roomId_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public int RoomId {
    get { return roomId_; }
    set {
      roomId_ = value;
    }
  }

  /// <summary>Field number for the "frameIndex" field.</summary>
  public const int FrameIndexFieldNumber = 2;
  private int frameIndex_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public int FrameIndex {
    get { return frameIndex_; }
    set {
      frameIndex_ = value;
    }
  }

  /// <summary>Field number for the "dataType" field.</summary>
  public const int DataTypeFieldNumber = 3;
  private string dataType_ = "";
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public string DataType {
    get { return dataType_; }
    set {
      dataType_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
    }
  }

  /// <summary>Field number for the "data" field.</summary>
  public const int DataFieldNumber = 4;
  private pb::ByteString data_ = pb::ByteString.Empty;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public pb::ByteString Data {
    get { return data_; }
    set {
      data_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
    }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override bool Equals(object other) {
    return Equals(other as FrameData);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public bool Equals(FrameData other) {
    if (ReferenceEquals(other, null)) {
      return false;
    }
    if (ReferenceEquals(other, this)) {
      return true;
    }
    if (RoomId != other.RoomId) return false;
    if (FrameIndex != other.FrameIndex) return false;
    if (DataType != other.DataType) return false;
    if (Data != other.Data) return false;
    return true;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override int GetHashCode() {
    int hash = 1;
    if (RoomId != 0) hash ^= RoomId.GetHashCode();
    if (FrameIndex != 0) hash ^= FrameIndex.GetHashCode();
    if (DataType.Length != 0) hash ^= DataType.GetHashCode();
    if (Data.Length != 0) hash ^= Data.GetHashCode();
    return hash;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override string ToString() {
    return pb::JsonFormatter.ToDiagnosticString(this);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void WriteTo(pb::CodedOutputStream output) {
    if (RoomId != 0) {
      output.WriteRawTag(8);
      output.WriteInt32(RoomId);
    }
    if (FrameIndex != 0) {
      output.WriteRawTag(16);
      output.WriteInt32(FrameIndex);
    }
    if (DataType.Length != 0) {
      output.WriteRawTag(26);
      output.WriteString(DataType);
    }
    if (Data.Length != 0) {
      output.WriteRawTag(34);
      output.WriteBytes(Data);
    }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public int CalculateSize() {
    int size = 0;
    if (RoomId != 0) {
      size += 1 + pb::CodedOutputStream.ComputeInt32Size(RoomId);
    }
    if (FrameIndex != 0) {
      size += 1 + pb::CodedOutputStream.ComputeInt32Size(FrameIndex);
    }
    if (DataType.Length != 0) {
      size += 1 + pb::CodedOutputStream.ComputeStringSize(DataType);
    }
    if (Data.Length != 0) {
      size += 1 + pb::CodedOutputStream.ComputeBytesSize(Data);
    }
    return size;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(FrameData other) {
    if (other == null) {
      return;
    }
    if (other.RoomId != 0) {
      RoomId = other.RoomId;
    }
    if (other.FrameIndex != 0) {
      FrameIndex = other.FrameIndex;
    }
    if (other.DataType.Length != 0) {
      DataType = other.DataType;
    }
    if (other.Data.Length != 0) {
      Data = other.Data;
    }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(pb::CodedInputStream input) {
    uint tag;
    while ((tag = input.ReadTag()) != 0) {
      switch(tag) {
        default:
          input.SkipLastField();
          break;
        case 8: {
          RoomId = input.ReadInt32();
          break;
        }
        case 16: {
          FrameIndex = input.ReadInt32();
          break;
        }
        case 26: {
          DataType = input.ReadString();
          break;
        }
        case 34: {
          Data = input.ReadBytes();
          break;
        }
      }
    }
  }

}

#endregion


#endregion Designer generated code
